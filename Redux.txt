Resource link 

1.https://www.youtube.com/watch?v=GGxK3oKimLA&list=PLZjjdd9-SJS0UiiJ0-dYk_PpI5GjYQ-Eb

2.https://www.youtube.com/watch?v=X7Zop1c2gVI&list=PLUVqY59GNZQMYJgEO3KWXkGcd3JSEfUst
 
3 https://www.youtube.com/watch?v=NqzdVN2tyvQ 

What is Redux

Ans - A container where we can store whole application data so we call it state management

Redux follows a unidirectional data flow, where the components of the application dispatch actions to the store, 
and the store triggers reducers to update the state. The updated state is then passed back to the components, which re-render with the new data.

Overall, Redux simplifies state management by providing a clear and structured way to handle state changes, 
especially in large applications where the state can become complex and challenging to manage using traditional methods.
      
Data flow in redux

Four pilors

1.Action  - collect data from api or component 

2.Reducer - get data from action and send to store

3.store - state of complete application 

4.view - React component.


Note = only one store in one redux complication 

Priciple of Redux 

1.Single Source of Truth: 

The entire state of the application is stored in a single JavaScript object known as the "store." 
This makes it easy to understand and debug the state of the application as there is only one place where the state is managed.

2. State is read-only:

The state in Redux is read-only, meaning the only way to change the state is to dispatch an action. 
The state itself should not be mutated, but instead, a new state is created with the desired changes.

3.Changes are Made with Pure Functions: 
Redux relies on pure functions called "reducers" to manage state changes. 
A reducer takes the current state and an action as inputs and returns a new state based on the action's type and payload.


Folder structer of redux

Components

Containers

Service
   Actions
	index.js
   Reducer 
       reucer.js
      root-reducer.js
   Contants

What is a Redux store?

A Redux store is a JavaScript object that holds the application's state. 
It allows access to state via the getState() method and allows state to be updated via the dispatch(action) method. 
The store is created using the createStore() function provided by Redux.

What is an action in Redux?

Actions are plain JavaScript objects that represent the intention to change the state. 
They must have a type property indicating the type of action being performed. 
Actions are typically created by action creator functions and dispatched to the Redux store.

What is a reducer in Redux?

A reducer is a pure function that takes the current state and an action as arguments, and returns the new state. 
Reducers specify how the application's state changes in response to actions dispatched to the Redux store.

What is the role of middleware in Redux?

Middleware in Redux provides a third-party extension point between dispatching an action and the moment it reaches the reducer. 
Middleware is commonly used for logging, asynchronous actions, routing, etc. 
Examples of Redux middleware include redux-thunk for handling asynchronous actions and redux-logger for logging actions and state changes.

How do you connect Redux with a React application?

Redux can be connected with a React application using the react-redux library. 
The connect() function from react-redux is used to connect React components to the Redux store, allowing components to access state and dispatch actions.

What is the purpose of mapStateToProps and mapDispatchToProps functions in Redux?

mapStateToProps: This function is used to specify which state from the Redux store should be passed to the props of a React component.
mapDispatchToProps: This function is used to specify which action creators should be wrapped in dispatch() calls and passed to the props of a React component.
How do you handle asynchronous actions in Redux?

Asynchronous actions in Redux can be handled using middleware like redux-thunk or redux-saga. redux-thunk allows action creators to return functions instead of plain action objects, enabling asynchronous logic inside those functions. redux-saga uses generator functions to handle side effects like asynchronous calls in a more structured and testable way.

What are the common challenges faced while using Redux?

Some common challenges faced while using Redux include:

Managing the boilerplate code required for actions, reducers, and action creators.
Properly structuring the Redux store and state tree for efficient data management.
Debugging complex state-related issues.
Handling asynchronous actions and side effects in a predictable and efficient manner.

useSelector:

useSelector is a hook provided by the react-redux library in React applications that allows components to extract data from the Redux store state. 
It is similar to mapStateToProps in class-based components but is used within functional components.
useSelector takes a selector function as an argument, which specifies which part of the Redux store's state to extract. 
When the Redux store state changes, the component using useSelector will re-render to reflect the updated state.

Ex- 

import { useSelector } from 'react-redux';

const MyComponent = () => {
    const counter = useSelector(state => state.counter);
    return <div>{counter}</div>;
};

useDispatch:

useDispatch is another hook provided by the react-redux library in React applications. 
It allows components to dispatch actions to the Redux store. 
This hook returns a reference to the dispatch function from the Redux store, which can be used to dispatch actions.

Selectors in Redux are functions that encapsulate the logic for extracting specific pieces of data from the Redux store's state. 
They help in keeping the components decoupled from the structure of the Redux store, enabling better maintainability and reusability of the codebase.
Selectors are typically used with functions like useSelector to access relevant parts of the state.
	


Q create multiple checkbox in react js 

import React, { useState } from "react";

function child() {
  const [selectAll, setSelectAll] = useState(false);
  const [checkboxes, setCheckboxes] = useState([
    { id: 1, checked: false },
    { id: 2, checked: false },
    { id: 3, checked: false },
    { id: 4, checked: false },
    { id: 5, checked: false },
    { id: 6, checked: false }
  ]);

  // Function to handle master checkbox change
  const handleMasterCheckboxChange = () => {
    const newSelectAll = !selectAll;
    const newCheckboxes = checkboxes.map((checkbox) => ({
      ...checkbox,
      checked: newSelectAll
    }));
    setSelectAll(newSelectAll);
    setCheckboxes(newCheckboxes);
  };

  // Function to handle child checkbox change
  const handleChildCheckboxChange = (id) => {
    const newCheckboxes = checkboxes.map((checkbox) =>
      checkbox.id === id
        ? { ...checkbox, checked: !checkbox.checked }
        : checkbox
    );
    const newSelectAll = newCheckboxes.every((checkbox) => checkbox.checked);
    setSelectAll(newSelectAll);
    setCheckboxes(newCheckboxes);
  };

  return (
    <div>
      <label>
        <input
          type="checkbox"
          checked={selectAll}
          onChange={handleMasterCheckboxChange}
        />{" "}
        Select All
      </label>
      {checkboxes.map((checkbox) => (
        <div key={checkbox.id}>
          <label>
            <input
              type="checkbox"
              checked={checkbox.checked}
              onChange={() => handleChildCheckboxChange(checkbox.id)}
            />{" "}
            Checkbox {checkbox.id}
          </label>
        </div>
      ))}
    </div>
  );
}

export default child;

Company profile 

https://www.tychotechnologies.com/react-developer
